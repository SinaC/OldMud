#include <stdio.h>
#include "cxx/parser_skel.hh"
#include "grammar.hh"
#include "scanner.hh"
const int grammar_initialState = 184;
const int grammar_initialMethodState = 173;
int grammar_map_token(int tok) {
  switch (tok) {case E_O_F: return 1;
case CLASS: return 2;
case EXTENDS: return 3;
case '{': return 4;
case '}': return 5;
case ABSTRACT: return 6;
case ',': return 7;
case '(': return 8;
case ')': return 9;
case COMMAND_LAST: return 10;
case FORCE: return 11;
case ';': return 12;
case WHILE: return 13;
case IF: return 14;
case ELSE: return 15;
case VAR: return 16;
case '=': return 17;
case OBJVAR: return 18;
case ':': return 19;
case COMMAND: return 20;
case '!': return 21;
case '-': return 22;
case '[': return 23;
case '|': return 24;
case LEFTARROW: return 25;
case ']': return 26;
case ANY: return 27;
case FIRST: return 28;
case PTPT: return 29;
case IS: return 30;
case HAS: return 31;
case '*': return 32;
case '/': return 33;
case '+': return 34;
case IN: return 35;
case LE: return 36;
case '<': return 37;
case GE: return 38;
case '>': return 39;
case EQ: return 40;
case NE: return 41;
case EQUIV: return 42;
case AND: return 43;
case OR: return 44;
case '.': return 45;
case DBLPT: return 46;
case IDENT: return 47;
case STRING: return 48;
case INTEGER: return 49;
case NULL_TOK: return 50;
default : 
  printf("maptoken: got unknown token: %d '%c'!\
", tok, tok);
  return 0;
}}
const int actionrow0[] = {0, 0, -71, -71, 0, 0, -71, -71, -71, -71, 0, -71, 0, 0, 0, 0, -71, 0, -71, -71, 0, -71, -71, -71, -71, -71, 0, 0, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, 0, 0, 0, 0, 0};
const int actionrow1[] = {0, 0, 0, -8, 0, 0, -8, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow2[] = {0, 0, 0, -9, 0, 0, -9, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
const int actionrow4[] = {0, 0, 0, -7, 0, 0, 4, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow5[] = {0, 0, 0, 0, 0, 0, -63, -71, -63, -63, 0, -63, 0, 0, 0, 0, -63, 0, -63, -63, 0, -63, -63, -63, 0, -63, 0, 0, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -71, 0, 0, 0, 0};
const int actionrow6[] = {0, 0, 0, 0, 0, 0, -64, 0, -64, -64, 0, -64, 0, 0, 0, 0, -64, 0, -64, -64, 0, -64, -64, -64, 0, -64, 0, 0, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, 0, 0, 0, 0, 0};
const int actionrow7[] = {0, 0, 0, 0, 0, 0, -65, 0, -65, -65, 0, -65, 0, 0, 0, 0, -65, 0, -65, -65, 0, -65, -65, -65, 0, -65, 0, 0, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, 0, 0, 0, 0, 0};
const int actionrow8[] = {0, 0, 0, 0, 0, 0, -66, 0, -66, -66, 0, -66, 0, 0, 0, 0, -66, 0, -66, -66, 0, -66, -66, -66, 0, -66, 0, 0, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, 0, 0, 0, 0, 0};
const int actionrow9[] = {0, 0, 0, 0, 0, 0, -42, 0, -42, -42, 0, -42, 0, 0, 0, 0, -42, 0, -42, -42, 0, -42, -42, -42, 0, -42, 0, 0, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, 0, 0, 0, 0, 0};
const int actionrow10[] = {0, 0, 0, 0, 0, 0, -41, 0, -41, -41, 0, -41, 0, 0, 0, 0, -41, 0, -41, -41, 0, -41, -41, -41, 0, -41, 0, 0, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, 0, 0, 0, 0, 0};
const int actionrow11[] = {0, 0, 0, 0, 0, 0, -40, 0, -40, -40, 0, -40, 0, 0, 0, 0, -40, 0, -40, -40, 0, -40, -40, -40, 0, -40, 0, 0, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, 0, 0, 0, 0, 0};
const int actionrow12[] = {0, 0, 0, 0, 0, 0, -57, 0, -57, -57, 0, -57, 0, 0, 0, 0, -57, 0, -57, -57, 0, 38, 53, -57, 0, -57, 0, 0, -57, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow13[] = {0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 109, 107, 0, 0, 0, 91, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9};
const int actionrow14[] = {0, 0, 0, 0, 0, 0, -56, 0, -56, -56, 0, -56, 0, 0, 0, 0, -56, 0, -56, -56, 0, 38, 53, -56, 0, -56, 0, 0, -56, -56, -56, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, -56, 61, 0, 0, 0, 0, 0};
const int actionrow15[] = {0, 0, 0, 0, 0, 0, -55, 0, -55, -55, 0, -55, 0, 0, 0, 0, -55, 0, -55, -55, 0, 38, 53, -55, 0, -55, 0, 0, -55, -55, -55, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, -55, -55, 61, 0, 0, 0, 0, 0};
const int actionrow16[] = {0, 0, 0, 0, 0, 0, -54, 0, -54, -54, 0, -54, 0, 0, 0, 0, -54, 0, -54, -54, 0, 38, 53, -54, 0, -54, 0, 0, -54, -54, -54, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, -54, -54, -54, 61, 0, 0, 0, 0, 0};
const int actionrow17[] = {0, 0, 0, 0, 0, 0, -53, 0, -53, -53, 0, -53, 0, 0, 0, 0, -53, 0, -53, -53, 0, 38, 53, -53, 0, -53, 0, 0, -53, -53, -53, 44, 42, 40, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, 61, 0, 0, 0, 0, 0};
const int actionrow18[] = {0, 0, 0, 0, 0, 0, -48, 0, -48, -48, 0, -48, 0, 0, 0, 0, -48, 0, -48, -48, 0, 38, 53, -48, 0, -48, 0, 0, -48, -48, -48, 44, 42, 40, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, 61, 0, 0, 0, 0, 0};
const int actionrow19[] = {0, 0, 0, 0, 0, 0, -47, 0, -47, -47, 0, -47, 0, 0, 0, 0, -47, 0, -47, -47, 0, 38, 53, -47, 0, -47, 0, 0, -47, -47, -47, 44, 42, 40, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, 61, 0, 0, 0, 0, 0};
const int actionrow20[] = {0, 0, 0, 0, 0, 0, -50, 0, -50, -50, 0, -50, 0, 0, 0, 0, -50, 0, -50, -50, 0, 38, 53, -50, 0, -50, 0, 0, -50, -50, -50, 44, 42, 40, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, 61, 0, 0, 0, 0, 0};
const int actionrow21[] = {0, 0, 0, 0, 0, 0, -52, 0, -52, -52, 0, -52, 0, 0, 0, 0, -52, 0, -52, -52, 0, 38, 53, -52, 0, -52, 0, 0, -52, -52, -52, 44, 42, 40, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, 61, 0, 0, 0, 0, 0};
const int actionrow22[] = {0, 0, 0, 0, 0, 0, -51, 0, -51, -51, 0, -51, 0, 0, 0, 0, -51, 0, -51, -51, 0, 38, 53, -51, 0, -51, 0, 0, -51, -51, -51, 44, 42, 40, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, 61, 0, 0, 0, 0, 0};
const int actionrow23[] = {0, 0, 0, 0, 0, 0, -49, 0, -49, -49, 0, -49, 0, 0, 0, 0, -49, 0, -49, -49, 0, 38, 53, -49, 0, -49, 0, 0, -49, -49, -49, 44, 42, 40, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, 61, 0, 0, 0, 0, 0};
const int actionrow24[] = {0, 0, 0, 0, 0, 0, -46, 0, -46, -46, 0, -46, 0, 0, 0, 0, -46, 0, -46, -46, 0, -46, 53, -46, 0, -46, 0, 0, -46, -46, -46, 44, 42, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, 61, 0, 0, 0, 0, 0};
const int actionrow25[] = {0, 0, 0, 0, 0, 0, -45, 0, -45, -45, 0, -45, 0, 0, 0, 0, -45, 0, -45, -45, 0, -45, 53, -45, 0, -45, 0, 0, -45, -45, -45, 44, 42, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, 61, 0, 0, 0, 0, 0};
const int actionrow26[] = {0, 0, 0, 0, 0, 0, -44, 0, -44, -44, 0, -44, 0, 0, 0, 0, -44, 0, -44, -44, 0, -44, 53, -44, 0, -44, 0, 0, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, 61, 0, 0, 0, 0, 0};
const int actionrow27[] = {0, 0, 0, 0, 0, 0, -43, 0, -43, -43, 0, -43, 0, 0, 0, 0, -43, 0, -43, -43, 0, -43, 53, -43, 0, -43, 0, 0, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, 61, 0, 0, 0, 0, 0};
const int actionrow28[] = {0, 0, 0, 0, 0, 0, -39, 0, -39, -39, 0, -39, 0, 0, 0, 0, -39, 0, -39, -39, 0, -39, -39, -39, 0, -39, 0, 0, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, 0, 0, 0, 0, 0};
const int actionrow29[] = {0, 0, 0, 0, 0, 0, -37, 0, -37, -37, 0, -37, 0, 0, 0, 0, -37, 0, -37, -37, 0, -37, -37, -37, 0, -37, 0, 0, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, 0, 0, 0, 0, 0};
const int actionrow30[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 46, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow31[] = {0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 109, 107, 0, 0, 45, 91, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9};
const int actionrow32[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 10, 0, 0, 48, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow33[] = {0, 0, 0, 0, 0, 0, -38, 0, -38, -38, 0, -38, 0, 0, 0, 0, -38, 0, -38, -38, 0, -38, -38, -38, 0, -38, 0, 0, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, 0, 0, 0, 0, 0};
const int actionrow34[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 50, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow35[] = {0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 109, 107, 0, 0, 0, 91, 81, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9};
const int actionrow36[] = {0, 0, 0, 0, 0, 0, -70, 0, -70, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, -70, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow37[] = {0, 0, 0, 0, 0, 0, 55, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow38[] = {0, 0, 0, 0, 0, 0, -61, 0, -61, -61, 0, -61, 0, 0, 0, 0, -61, 0, -61, -61, 0, -61, -61, -61, 0, -61, 0, 0, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, 0, 0, 0, 0, 0};
const int actionrow39[] = {0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow40[] = {0, 0, 0, 0, 0, 0, 0, 114, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 109, 107, 0, 0, 0, 91, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9};
const int actionrow41[] = {0, 0, 0, 0, 0, 0, -60, 59, -60, -60, 0, -60, 0, 0, 0, 0, -60, 0, -60, -60, 0, -60, -60, -60, 0, -60, 0, 0, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, 0, 0, 0, 0, 0};
const int actionrow42[] = {0, 0, 0, 0, 0, 0, -69, 0, -69, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow43[] = {0, 0, 0, 0, 0, 0, -62, 0, -62, -62, 0, -62, 0, 0, 0, 0, -62, 0, -62, -62, 0, -62, -62, -62, 0, -62, 0, 0, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, 0, 0, 0, 0, 0};
const int actionrow44[] = {0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow45[] = {0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow46[] = {0, 0, 0, 0, 0, 0, -59, 0, -59, -59, 0, -59, 0, 0, 0, 0, -59, 0, -59, -59, 0, -59, -59, -59, 0, -59, 0, 0, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, 0, 0, 0, 0, 0};
const int actionrow47[] = {0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow48[] = {0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0};
const int actionrow49[] = {0, 0, 0, 0, 0, 0, -36, 0, -36, -36, 0, -36, 0, 0, 0, 0, -36, 0, -36, -36, 0, -36, -36, -36, 0, -36, 0, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, 0, 0, 0, 0, 0};
const int actionrow50[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow51[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 73, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow52[] = {0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow53[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow54[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow55[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow56[] = {0, 0, 0, 0, 0, 0, -35, 0, -35, -35, 0, -35, 0, 0, 0, 0, -35, 0, -35, -35, 0, -35, -35, -35, 0, -35, 0, 0, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, 0, 0, 0, 0, 0};
const int actionrow57[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow58[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 83, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow59[] = {0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow60[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow61[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow62[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow63[] = {0, 0, 0, 0, 0, 0, -33, 0, -33, -33, 0, -33, 0, 0, 0, 0, -33, 0, -33, -33, 0, -33, -33, -33, 0, -33, 0, 0, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, 0, 0, 0, 0, 0};
const int actionrow64[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow65[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 93, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow66[] = {0, 0, 0, 0, 0, 0, -34, 0, -34, -34, 0, -34, 0, 0, 0, 0, -34, 0, -34, -34, 0, -34, -34, -34, 0, -34, 0, 0, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, 0, 0, 0, 0, 0};
const int actionrow67[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow68[] = {0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 97, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow69[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow70[] = {0, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 101, 0, -69, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow71[] = {0, 0, 0, 0, 0, 0, -58, 0, -58, -58, 0, -58, 0, 0, 0, 0, -58, 0, -58, -58, 0, -58, -58, -58, 0, -58, 0, 0, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, -58, 0, 0, 0, 0, 0};
const int actionrow72[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow73[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow74[] = {0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 109, 107, 0, 0, -67, 91, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9};
const int actionrow75[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow76[] = {0, 0, 0, 0, 0, 0, -32, 0, -32, -32, 0, -32, 0, 0, 0, 0, -32, 0, -32, -32, 0, -32, 53, -32, 0, -32, 0, 0, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, 61, 0, 0, 0, 0, 0};
const int actionrow77[] = {0, 0, 0, 0, 0, 0, -31, 0, -31, -31, 0, -31, 0, 0, 0, 0, -31, 0, -31, -31, 0, -31, 53, -31, 0, -31, 0, 0, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, 61, 0, 0, 0, 0, 0};
const int actionrow78[] = {0, 0, 0, 0, 0, 0, -30, 0, -30, -30, 0, -30, 0, 0, 0, 0, -30, 0, -30, -30, 0, -30, -30, -30, 0, -30, 0, 0, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, 0, 0, 0, 0, 0};
const int actionrow79[] = {0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow80[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 16, 0, 0, -27, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow81[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow82[] = {0, 0, 0, -13, -13, 0, 0, -13, 0, -13, -13, 0, -13, -13, -13, -13, 0, -13, 0, -13, -13, -13, -13, 0, 0, 0, -13, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, -13, -13, -13};
const int actionrow83[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow84[] = {0, 0, 0, -28, -28, 0, 0, -28, 0, -28, -28, 0, -28, -28, -28, -28, 0, -28, 0, -28, -28, -28, -28, 0, 0, 0, -28, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, -28, -28, -28};
const int actionrow85[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow86[] = {0, 0, 0, -14, -14, 0, 0, -14, 0, -14, -14, 0, -14, -14, -14, -14, 0, -14, 0, -14, -14, -14, -14, 0, 0, 0, -14, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, -14, -14, -14};
const int actionrow87[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 16, 0, 0, -23, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow88[] = {0, 0, 0, -16, -16, 0, 0, -16, 0, -16, -16, 0, -16, -16, -16, -16, 0, -16, 0, -16, -16, -16, -16, 0, 0, 0, -16, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -16, -16, -16};
const int actionrow89[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow90[] = {0, 0, 0, -20, -20, 0, 0, -20, 0, -20, -20, 0, -20, -20, -20, -20, 0, -20, 0, -20, -20, -20, -20, 0, 0, 0, -20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, -20, -20, -20};
const int actionrow91[] = {0, 0, 0, -21, -21, 0, 0, -21, 0, -21, -21, 0, -21, -21, -21, -21, 0, -21, 0, -21, -21, -21, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21, -21, -21};
const int actionrow92[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow93[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow94[] = {0, 0, 0, -22, -22, 0, 0, -22, 0, -22, -22, 0, -22, -22, -22, -22, 0, -22, 0, -22, -22, -22, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, -22, -22, -22};
const int actionrow95[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow96[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow97[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 137, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow98[] = {0, 0, 0, -19, -19, 0, 0, -19, 0, -19, -19, 0, -19, -19, -19, -19, 0, -19, 0, -19, -19, -19, -19, 0, 0, 0, -19, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, -19, -19, -19};
const int actionrow99[] = {0, 0, 0, 155, 0, 0, 0, 114, 0, -23, 124, 0, 151, 146, 0, 132, 0, 139, 0, -23, 111, 109, 107, 0, 0, 0, 91, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9};
const int actionrow100[] = {0, 0, 0, -18, -18, 0, 0, -18, 0, -18, -18, 0, -18, -18, 141, -18, 0, -18, 0, -18, -18, -18, -18, 0, 0, 0, -18, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, -18, -18, -18};
const int actionrow101[] = {0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow102[] = {0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow103[] = {0, 0, 0, -17, -17, 0, 0, -17, 0, -17, -17, 0, -17, -17, -17, -17, 0, -17, 0, -17, -17, -17, -17, 0, 0, 0, -17, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, -17, -17, -17};
const int actionrow104[] = {0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 38, 53, 0, 0, 0, 0, 0, 0, 14, 12, 44, 42, 40, 28, 26, 36, 30, 34, 32, 24, 22, 20, 18, 61, 0, 0, 0, 0, 0};
const int actionrow105[] = {0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow106[] = {0, 0, 0, -26, -26, 0, 0, -26, 0, -26, -26, 0, -26, -26, 0, -26, 0, -26, 0, -26, -26, -26, -26, 0, 0, 0, -26, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, -26};
const int actionrow107[] = {0, 0, 0, -15, -15, 0, 0, -15, 0, -15, -15, 0, -15, -15, -15, -15, 0, -15, 0, -15, -15, -15, -15, 0, 0, 0, -15, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, -15, -15, -15};
const int actionrow108[] = {0, 0, 0, 155, 153, 0, 0, 114, 0, -23, 124, 0, 151, 146, 0, 132, 0, 139, 0, -23, 111, 109, 107, 0, 0, 0, 91, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9};
const int actionrow109[] = {0, 0, 0, -25, -25, 0, 0, -25, 0, -25, -25, 0, -25, -25, 0, -25, 0, -25, 0, -25, -25, -25, -25, 0, 0, 0, -25, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, -25, -25, -25};
const int actionrow110[] = {0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0};
const int actionrow111[] = {0, 0, 0, 155, 156, 0, 0, 114, 0, -23, 124, 0, 151, 146, 0, 132, 0, 139, 0, -23, 111, 109, 107, 0, 0, 0, 91, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9};
const int actionrow112[] = {0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0};
const int actionrow113[] = {0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow114[] = {0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow115[] = {0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
const int actionrow116[] = {0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow117[] = {0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0};
const int actionrow118[] = {-4, -4, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow119[] = {0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
const int actionrow120[] = {0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0};
const int actionrow121[] = {0, 0, 0, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow122[] = {0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
const int actionrow123[] = {0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow124[] = {-5, -5, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow125[] = {0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
const int actionrow126[] = {0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow127[] = {0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow128[] = {0, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow129[] = {-3, -3, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow130[] = {-1, 171, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow131[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow132[] = {182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int actionrow133[] = {-2, -2, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int *grammar_action_table[] = {actionrow0, actionrow1, actionrow2, actionrow3, actionrow4, actionrow5, actionrow6, actionrow7, actionrow8, actionrow9, actionrow10, actionrow3, actionrow11, actionrow3, actionrow12, actionrow13, actionrow14, actionrow13, actionrow15, actionrow13, actionrow16, actionrow13, actionrow17, actionrow13, actionrow18, actionrow13, actionrow19, actionrow13, actionrow20, actionrow13, actionrow21, actionrow13, actionrow22, actionrow13, actionrow23, actionrow13, actionrow24, actionrow13, actionrow25, actionrow13, actionrow26, actionrow13, actionrow27, actionrow13, actionrow28, actionrow29, actionrow30, actionrow31, actionrow32, actionrow33, actionrow34, actionrow13, actionrow35, actionrow36, actionrow13, actionrow37, actionrow38, actionrow39, actionrow40, actionrow41, actionrow3, actionrow42, actionrow43, actionrow44, actionrow40, actionrow45, actionrow3, actionrow46, actionrow47, actionrow40, actionrow48, actionrow49, actionrow50, actionrow51, actionrow13, actionrow52, actionrow13, actionrow53, actionrow3, actionrow54, actionrow55, actionrow56, actionrow57, actionrow58, actionrow13, actionrow59, actionrow13, actionrow60, actionrow3, actionrow61, actionrow62, actionrow63, actionrow64, actionrow65, actionrow13, actionrow66, actionrow67, actionrow68, actionrow13, actionrow69, actionrow3, actionrow70, actionrow71, actionrow72, actionrow73, actionrow74, actionrow75, actionrow76, actionrow13, actionrow77, actionrow13, actionrow78, actionrow79, actionrow13, actionrow80, actionrow13, actionrow81, actionrow82, actionrow83, actionrow84, actionrow85, actionrow86, actionrow87, actionrow13, actionrow88, actionrow89, actionrow90, actionrow91, actionrow92, actionrow13, actionrow93, actionrow3, actionrow94, actionrow95, actionrow13, actionrow96, actionrow3, actionrow97, actionrow13, actionrow98, actionrow99, actionrow100, actionrow99, actionrow101, actionrow13, actionrow102, actionrow103, actionrow99, actionrow104, actionrow13, actionrow105, actionrow106, actionrow107, actionrow108, actionrow109, actionrow110, actionrow111, actionrow109, actionrow112, actionrow113, actionrow114, actionrow115, actionrow116, actionrow117, actionrow118, actionrow119, actionrow120, actionrow121, actionrow122, actionrow123, actionrow3, actionrow124, actionrow125, actionrow120, actionrow126, actionrow122, actionrow127, actionrow3, actionrow128, actionrow129, actionrow130, actionrow131, actionrow132, actionrow133};
const int gotorow0[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int gotorow1[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3};
const int gotorow2[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11};
const int gotorow3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13};
const int gotorow4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 71};
const int gotorow5[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 71};
const int gotorow6[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 71};
const int gotorow7[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 71};
const int gotorow8[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 71};
const int gotorow9[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 71};
const int gotorow10[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 71};
const int gotorow11[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 71};
const int gotorow12[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 71};
const int gotorow13[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 71};
const int gotorow14[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 71};
const int gotorow15[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 71};
const int gotorow16[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 71};
const int gotorow17[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 71};
const int gotorow18[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 71};
const int gotorow19[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 71};
const int gotorow20[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 71};
const int gotorow21[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 71};
const int gotorow22[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 71};
const int gotorow23[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 58, 56, 71};
const int gotorow24[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60};
const int gotorow25[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 64, 56, 71};
const int gotorow26[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66};
const int gotorow27[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 69, 56, 71};
const int gotorow28[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 71};
const int gotorow29[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 71};
const int gotorow30[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78};
const int gotorow31[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 71};
const int gotorow32[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 71};
const int gotorow33[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88};
const int gotorow34[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 71};
const int gotorow35[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 71};
const int gotorow36[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100};
const int gotorow37[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 105, 56, 71};
const int gotorow38[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 71};
const int gotorow39[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 71};
const int gotorow40[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 71};
const int gotorow41[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 71};
const int gotorow42[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0};
const int gotorow43[] = {0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 122, 0, 0, 0, 0, 0};
const int gotorow44[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 71};
const int gotorow45[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 71};
const int gotorow46[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131};
const int gotorow47[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 71};
const int gotorow48[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136};
const int gotorow49[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 71};
const int gotorow50[] = {0, 0, 0, 0, 0, 0, 0, 140, 119, 0, 0, 0, 0, 126, 0, 0, 71};
const int gotorow51[] = {0, 0, 0, 0, 0, 0, 0, 142, 119, 0, 0, 0, 0, 126, 0, 0, 71};
const int gotorow52[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 71};
const int gotorow53[] = {0, 0, 0, 0, 0, 0, 0, 147, 119, 0, 0, 0, 0, 126, 0, 0, 71};
const int gotorow54[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 71};
const int gotorow55[] = {0, 0, 0, 0, 0, 0, 0, 152, 119, 0, 0, 0, 0, 126, 0, 0, 71};
const int gotorow56[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0};
const int gotorow57[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0};
const int gotorow58[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0};
const int gotorow59[] = {0, 0, 0, 161, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2};
const int gotorow60[] = {0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163};
const int gotorow61[] = {0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int gotorow62[] = {0, 0, 0, 168, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2};
const int gotorow63[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170};
const int gotorow64[] = {0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int gotorow65[] = {0, 0, 0, 175, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2};
const int gotorow66[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177};
const int gotorow67[] = {0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int gotorow68[] = {183, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
const int *grammar_goto_table[] = {gotorow0, gotorow0, gotorow0, gotorow1, gotorow0, gotorow0, gotorow0, gotorow0, gotorow0, gotorow0, gotorow0, gotorow2, gotorow0, gotorow3, gotorow0, gotorow4, gotorow0, gotorow5, gotorow0, gotorow6, gotorow0, gotorow7, gotorow0, gotorow8, gotorow0, gotorow9, gotorow0, gotorow10, gotorow0, gotorow11, gotorow0, gotorow12, gotorow0, gotorow13, gotorow0, gotorow14, gotorow0, gotorow15, gotorow0, gotorow16, gotorow0, gotorow17, gotorow0, gotorow18, gotorow0, gotorow0, gotorow0, gotorow19, gotorow0, gotorow0, gotorow0, gotorow20, gotorow21, gotorow0, gotorow22, gotorow0, gotorow0, gotorow0, gotorow23, gotorow0, gotorow24, gotorow0, gotorow0, gotorow0, gotorow25, gotorow0, gotorow26, gotorow0, gotorow0, gotorow27, gotorow0, gotorow0, gotorow0, gotorow0, gotorow28, gotorow0, gotorow29, gotorow0, gotorow30, gotorow0, gotorow0, gotorow0, gotorow0, gotorow0, gotorow31, gotorow0, gotorow32, gotorow0, gotorow33, gotorow0, gotorow0, gotorow0, gotorow0, gotorow0, gotorow34, gotorow0, gotorow0, gotorow0, gotorow35, gotorow0, gotorow36, gotorow0, gotorow0, gotorow0, gotorow0, gotorow37, gotorow0, gotorow0, gotorow38, gotorow0, gotorow39, gotorow0, gotorow0, gotorow40, gotorow0, gotorow41, gotorow0, gotorow0, gotorow42, gotorow0, gotorow42, gotorow0, gotorow43, gotorow44, gotorow0, gotorow0, gotorow0, gotorow0, gotorow0, gotorow45, gotorow0, gotorow46, gotorow0, gotorow0, gotorow47, gotorow0, gotorow48, gotorow0, gotorow49, gotorow0, gotorow50, gotorow0, gotorow51, gotorow0, gotorow52, gotorow0, gotorow0, gotorow53, gotorow0, gotorow54, gotorow0, gotorow0, gotorow0, gotorow55, gotorow56, gotorow0, gotorow55, gotorow57, gotorow0, gotorow58, gotorow0, gotorow59, gotorow0, gotorow0, gotorow0, gotorow60, gotorow61, gotorow0, gotorow62, gotorow0, gotorow63, gotorow0, gotorow60, gotorow64, gotorow0, gotorow65, gotorow0, gotorow66, gotorow0, gotorow0, gotorow67, gotorow0, gotorow0, gotorow68};
int grammar_goto_entry[] = {0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 10, 11, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15, 16};
int grammar_rule_depth_table[] = {1, 0, 2, 7, 8, 0, 1, 1, 3, 0, 2, 5, 2, 3, 3, 2, 5, 5, 7, 3, 5, 7, 0, 2, 0, 2, 2, 2, 3, 3, 2, 2, 11, 9, 10, 10, 6, 5, 5, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 4, 3, 6, 6, 1, 1, 1, 1, 0, 1, 1, 3, 1};

// SinaC 2003, method code is now saved
 // store start of a method, also set in parser_skel.cc:parse_one_method
const char *startMethodCode;

NonTerminal* grammar_reduce_rule(int rule_id, stack_elem* rule) {
   switch(rule_id) {
case 1: {Module*  result = new Module;result->classes = (Class**) listAsArray((ListNonTerminal*) rule[0].elem, result->classes_count);
return result;}
case 2: {
  // a Class starts with a reduce of rule 2
  // and ends with a reduce of rule 4
  return NULL;
}
case 3: {return ListNonTerminal::newList(rule, 1, 0);
}
case 4: {
  Class*  result = new Class;
  result->ident = (Identifier*) rule[1].elem;

  result->extends = (Identifier**) listAsArray((ListNonTerminal*) rule[3].elem, result->extends_count);

  result->methods = (Method**) listAsArray((ListNonTerminal*) rule[5].elem, result->methods_count);

  return result;
}
case 5: {Class*  result = new Class;result->isAbstract = (int) rule[0].elem;

result->ident = (Identifier*) rule[2].elem;

result->extends = (Identifier**) listAsArray((ListNonTerminal*) rule[4].elem, result->extends_count);

result->methods = (Method**) listAsArray((ListNonTerminal*) rule[6].elem, result->methods_count);

return result;}case 6: {return NULL;
}case 7: {return (ListNonTerminal*) rule[0].elem;
}case 8: {return ListNonTerminal::newList(rule, 0, -1);
}case 9: {return ListNonTerminal::newList(rule, 2, 0);
}
   case 10: {
     // a Method starts with a reduce of rule 10 or 11 (11 for the first method in a class)
     //  and ends with a reduce of rule 12
     // we must rewind the start pointer because token has already been scanned
     startMethodCode = previous_cur_pos;
     return NULL;
   }
   case 11: {
     // we must rewind the start pointer because token has already been scanned
     startMethodCode = previous_cur_pos;
     return ListNonTerminal::newList(rule, 1, 0);
   }
   case 12: {
     Method*  result = new Method;result->ident = (Identifier*) rule[0].elem;

     result->params = (Identifier**) listAsArray((ListNonTerminal*) rule[2].elem, result->params_count);

     result->body = (Compound*) rule[4].elem;

     // me must rewind the end pointer because next token has already been scanned
     int size = previous_cur_pos-startMethodCode;
     result->code = new char [size+3]; // +1: \0  +2: \n\r
     strncpy( result->code, startMethodCode, size );
     result->code[size] = '\0';
     if ( result->code[size-1] != '\n' // add a carriage return
	  && result->code[size-1] != '\r' )
       strcat( result->code, "\n\r");
     return result;
   }
case 13: {Command*  result = new Command;
       result->verb=str_dup(rule[1].tok_image);
     result->parms = (CmdParm**) listAsArray((ListNonTerminal*) rule[0].elem, result->parms_count);

return result;}case 14: {ForceInstr*  result = new ForceInstr;
result->ch = (Expression*) rule[1].elem;
result->content = (Command*) rule[2].elem;
return result;}case 15: {Compound*  result = new Compound;
result->instr = (Instruction**) listAsArray((ListNonTerminal*) rule[1].elem, result->instr_count);

return result;}case 16: {ExprInstr*  result = new ExprInstr;result->expr = (Expression*) rule[0].elem;

return result;}case 17: {WhileInstr*  result = new WhileInstr;

result->cond = (Expression*) rule[2].elem;

result->body = (Instruction*) rule[4].elem;
return result;}case 18: {IfInstr*  result = new IfInstr;

result->cond = (Expression*) rule[2].elem;

result->thenpart = (Instruction*) rule[4].elem;
return result;}case 19: {IfInstr*  result = new IfInstr;

result->cond = (Expression*) rule[2].elem;

result->thenpart = (Instruction*) rule[4].elem;

result->elsepart = (Instruction*) rule[6].elem;
return result;}case 20: {VarDecl*  result = new VarDecl;
result->ident = (Identifier*) rule[1].elem;

return result;}case 21: {VarDecl*  result = new VarDecl;
result->ident = (Identifier*) rule[1].elem;

result->defval = (Expression*) rule[3].elem;

return result;}case 22: {ObjvarDecl*  result = new ObjvarDecl;
result->object = (Expression*) rule[1].elem;

result->ident = (Identifier*) rule[3].elem;

result->defval = (Expression*) rule[5].elem;

return result;}case 23: {return NULL;
}case 24: {return ListNonTerminal::newList(rule, 1, 0);
}case 25: {return NULL;
}case 26: {return ListNonTerminal::newList(rule, 1, 0);
}case 27: {CmdParm*  result = new CmdParm;
       result->verb=str_dup(rule[0].tok_image);
    
result->expr = (Expression*) rule[1].elem;
return result;}case 28: {Command*  result = new Command;
       result->verb=str_dup(rule[1].tok_image);
     result->parms = (CmdParm**) listAsArray((ListNonTerminal*) rule[0].elem, result->parms_count);

return result;}case 29: {Compound*  result = new Compound;
result->instr = (Instruction**) listAsArray((ListNonTerminal*) rule[1].elem, result->instr_count);

return result;}case 30: {return (Expression* ) rule[1].elem;}case 31: {UnaryExpr*  result = new UnaryExpr;result->op = (int) rule[0].elem;
result->expr = (Expression*) rule[1].elem;
return result;}case 32: {UnaryExpr*  result = new UnaryExpr;result->op = (int) rule[0].elem;
result->expr = (Expression*) rule[1].elem;
return result;}case 33: {ComprehensionExpr*  result = new ComprehensionExpr;

result->generator = (Expression*) rule[2].elem;

result->variable = (Identifier*) rule[4].elem;

result->inputList = (Expression*) rule[6].elem;

result->condition = (Expression*) rule[8].elem;


return result;}case 34: {ComprehensionExpr*  result = new ComprehensionExpr;

result->generator = (Expression*) rule[2].elem;

result->variable = (Identifier*) rule[4].elem;

result->inputList = (Expression*) rule[6].elem;


return result;}case 35: {AnyListExpr*  result = new AnyListExpr;


result->variable = (Identifier*) rule[3].elem;

result->inputList = (Expression*) rule[5].elem;

result->condition = (Expression*) rule[7].elem;


return result;}case 36: {FirstListExpr*  result = new FirstListExpr;


result->variable = (Identifier*) rule[3].elem;

result->inputList = (Expression*) rule[5].elem;

result->condition = (Expression*) rule[7].elem;


return result;}case 37: {PartialList*  result = new PartialList;result->inputList = (Expression*) rule[0].elem;

result->lowerBound = (Expression*) rule[2].elem;

result->upperBound = (Expression*) rule[4].elem;

return result;}case 38: {PartialList*  result = new PartialList;result->inputList = (Expression*) rule[0].elem;


result->upperBound = (Expression*) rule[3].elem;

return result;}case 39: {PartialList*  result = new PartialList;result->inputList = (Expression*) rule[0].elem;

result->lowerBound = (Expression*) rule[2].elem;


return result;}case 40: {OtherBinaryExpr*  result = new OtherBinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Identifier*) rule[2].elem;
return result;}case 41: {OtherBinaryExpr*  result = new OtherBinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Identifier*) rule[2].elem;
return result;}case 42: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;

return result;}case 43: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 44: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 45: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 46: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 47: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 48: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 49: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 50: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 51: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 52: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 53: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 54: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 55: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 56: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 57: {BinaryExpr*  result = new BinaryExpr;result->left = (Expression*) rule[0].elem;
result->op = (int) rule[1].elem;
result->right = (Expression*) rule[2].elem;
return result;}case 58: {ConsList*  result = new ConsList;

result->elems = (Expression**) listAsArray((ListNonTerminal*) rule[2].elem, result->elems_count);


return result;}case 59: {CallExpr*  result = new CallExpr;result->left = (Identifier*) rule[0].elem;

result->params = (Expression**) listAsArray((ListNonTerminal*) rule[2].elem, result->params_count);

return result;}case 60: {QualifyExpr*  result = new QualifyExpr;result->left = (Expression*) rule[0].elem;

result->ident = (Identifier*) rule[2].elem;
return result;}case 61: {MethodCallExpr*  result = new MethodCallExpr;result->left = (Expression*) rule[0].elem;

result->ident = (Identifier*) rule[2].elem;

result->params = (Expression**) listAsArray((ListNonTerminal*) rule[4].elem, result->params_count);

return result;}case 62: {ScopeCallExpr*  result = new ScopeCallExpr;result->left = (Identifier*) rule[0].elem;

result->ident = (Identifier*) rule[2].elem;

result->params = (Expression**) listAsArray((ListNonTerminal*) rule[4].elem, result->params_count);

return result;}case 63: {Identifier*  result = new Identifier;
       result->image=str_dup(rule[0].tok_image);
     
return result;}case 64: {StringLiteral*  result = new StringLiteral;
       result->image=str_dup(rule[0].tok_image);
     
return result;}case 65: {IntegerLiteral*  result = new IntegerLiteral;
       result->value = atoi(rule[0].tok_image);
     
return result;}case 66: {NullLiteral*  result = new NullLiteral;
return result;}case 67: {return NULL;
}case 68: {return (ListNonTerminal*) rule[0].elem;
}case 69: {return ListNonTerminal::newList(rule, 0, -1);
}case 70: {return ListNonTerminal::newList(rule, 2, 0);
}case 71: {Identifier*  result = new Identifier;
       result->image=str_dup(rule[0].tok_image);
     
return result;} default:   printf("reduce_rule: got an invalid rule id.");   exit(-1);   }}Module::~Module(){
for (int i=0; i<classes_count; i++)
  delete classes[i];
  delete[] classes;

}void Module::dump(int depth) {
  printf("%sModule\n", shift(depth-1));
if (classes) for (int i=0; i<classes_count; i++) {
  printf("%sclasses[%d]\n", shift(depth), i);
  classes[i]->dump(depth+2);
}

}
Class::~Class(){
for (int i=0; i<methods_count; i++)
  delete methods[i];
  delete[] methods;

for (int i=0; i<extends_count; i++)
  delete extends[i];
  delete[] extends;

delete ident;
}void Class::dump(int depth) {
  printf("%sClass\n", shift(depth-1));
if (ident) {printf("%sident\n", shift(depth));
 ident->dump(depth+2);
}

if (isAbstract) printf("%sisAbstract = %d [%c]\n", shift(depth), isAbstract, isAbstract);

if (methods) for (int i=0; i<methods_count; i++) {
  printf("%smethods[%d]\n", shift(depth), i);
  methods[i]->dump(depth+2);
}

if (extends) for (int i=0; i<extends_count; i++) {
  printf("%sextends[%d]\n", shift(depth), i);
  extends[i]->dump(depth+2);
}

}
Method::~Method(){
for (int i=0; i<params_count; i++)
  delete params[i];
  delete[] params;

delete body;
delete ident;
}void Method::dump(int depth) {
  printf("%sMethod\n", shift(depth-1));
if (body) {printf("%sbody\n", shift(depth));
 body->dump(depth+2);
}

if (params) for (int i=0; i<params_count; i++) {
  printf("%sparams[%d]\n", shift(depth), i);
  params[i]->dump(depth+2);
}

if (ident) {printf("%sident\n", shift(depth));
 ident->dump(depth+2);
}

}
Instruction::~Instruction(){
}void Instruction::dump(int depth) {
  printf("%sInstruction\n", shift(depth-1));
}
CmdParm::~CmdParm(){
delete expr;
}void CmdParm::dump(int depth) {
  printf("%sCmdParm\n", shift(depth-1));
if (expr) {printf("%sexpr\n", shift(depth));
 expr->dump(depth+2);
}

}
Command::~Command(){
for (int i=0; i<parms_count; i++)
  delete parms[i];
  delete[] parms;

}void Command::dump(int depth) {
  printf("%sCommand\n", shift(depth-1));
if (parms) for (int i=0; i<parms_count; i++) {
  printf("%sparms[%d]\n", shift(depth), i);
  parms[i]->dump(depth+2);
}

}
ForceInstr::~ForceInstr(){
delete ch;
delete content;
}void ForceInstr::dump(int depth) {
  printf("%sForceInstr\n", shift(depth-1));
if (ch) {printf("%sch\n", shift(depth));
 ch->dump(depth+2);
}

if (content) {printf("%scontent\n", shift(depth));
 content->dump(depth+2);
}

}
Compound::~Compound(){
for (int i=0; i<instr_count; i++)
  delete instr[i];
  delete[] instr;

}void Compound::dump(int depth) {
  printf("%sCompound\n", shift(depth-1));
if (instr) for (int i=0; i<instr_count; i++) {
  printf("%sinstr[%d]\n", shift(depth), i);
  instr[i]->dump(depth+2);
}

}
ExprInstr::~ExprInstr(){
delete expr;
}void ExprInstr::dump(int depth) {
  printf("%sExprInstr\n", shift(depth-1));
if (expr) {printf("%sexpr\n", shift(depth));
 expr->dump(depth+2);
}

}
WhileInstr::~WhileInstr(){
delete body;
delete cond;
}void WhileInstr::dump(int depth) {
  printf("%sWhileInstr\n", shift(depth-1));
if (body) {printf("%sbody\n", shift(depth));
 body->dump(depth+2);
}

if (cond) {printf("%scond\n", shift(depth));
 cond->dump(depth+2);
}

}
IfInstr::~IfInstr(){
delete cond;
delete thenpart;
delete elsepart;
}void IfInstr::dump(int depth) {
  printf("%sIfInstr\n", shift(depth-1));
if (cond) {printf("%scond\n", shift(depth));
 cond->dump(depth+2);
}

if (thenpart) {printf("%sthenpart\n", shift(depth));
 thenpart->dump(depth+2);
}

if (elsepart) {printf("%selsepart\n", shift(depth));
 elsepart->dump(depth+2);
}

}
VarDecl::~VarDecl(){
delete defval;
delete ident;
}void VarDecl::dump(int depth) {
  printf("%sVarDecl\n", shift(depth-1));
if (defval) {printf("%sdefval\n", shift(depth));
 defval->dump(depth+2);
}

if (ident) {printf("%sident\n", shift(depth));
 ident->dump(depth+2);
}

}
ObjvarDecl::~ObjvarDecl(){
delete object;
delete ident;
delete defval;
}void ObjvarDecl::dump(int depth) {
  printf("%sObjvarDecl\n", shift(depth-1));
if (object) {printf("%sobject\n", shift(depth));
 object->dump(depth+2);
}

if (ident) {printf("%sident\n", shift(depth));
 ident->dump(depth+2);
}

if (defval) {printf("%sdefval\n", shift(depth));
 defval->dump(depth+2);
}

}
Expression::~Expression(){
}void Expression::dump(int depth) {
  printf("%sExpression\n", shift(depth-1));
}
UnaryExpr::~UnaryExpr(){
delete expr;
}void UnaryExpr::dump(int depth) {
  printf("%sUnaryExpr\n", shift(depth-1));
if (op) printf("%sop = %d [%c]\n", shift(depth), op, op);

if (expr) {printf("%sexpr\n", shift(depth));
 expr->dump(depth+2);
}

}
ComprehensionExpr::~ComprehensionExpr(){
delete generator;
delete condition;
delete inputList;
delete variable;
}void ComprehensionExpr::dump(int depth) {
  printf("%sComprehensionExpr\n", shift(depth-1));
if (generator) {printf("%sgenerator\n", shift(depth));
 generator->dump(depth+2);
}

if (condition) {printf("%scondition\n", shift(depth));
 condition->dump(depth+2);
}

if (inputList) {printf("%sinputList\n", shift(depth));
 inputList->dump(depth+2);
}

if (variable) {printf("%svariable\n", shift(depth));
 variable->dump(depth+2);
}

}
AnyListExpr::~AnyListExpr(){
delete condition;
delete inputList;
delete variable;
}void AnyListExpr::dump(int depth) {
  printf("%sAnyListExpr\n", shift(depth-1));
if (condition) {printf("%scondition\n", shift(depth));
 condition->dump(depth+2);
}

if (inputList) {printf("%sinputList\n", shift(depth));
 inputList->dump(depth+2);
}

if (variable) {printf("%svariable\n", shift(depth));
 variable->dump(depth+2);
}

}
FirstListExpr::~FirstListExpr(){
delete condition;
delete inputList;
delete variable;
}void FirstListExpr::dump(int depth) {
  printf("%sFirstListExpr\n", shift(depth-1));
if (condition) {printf("%scondition\n", shift(depth));
 condition->dump(depth+2);
}

if (inputList) {printf("%sinputList\n", shift(depth));
 inputList->dump(depth+2);
}

if (variable) {printf("%svariable\n", shift(depth));
 variable->dump(depth+2);
}

}
PartialList::~PartialList(){
delete inputList;
delete lowerBound;
delete upperBound;
}void PartialList::dump(int depth) {
  printf("%sPartialList\n", shift(depth-1));
if (inputList) {printf("%sinputList\n", shift(depth));
 inputList->dump(depth+2);
}

if (lowerBound) {printf("%slowerBound\n", shift(depth));
 lowerBound->dump(depth+2);
}

if (upperBound) {printf("%supperBound\n", shift(depth));
 upperBound->dump(depth+2);
}

}
OtherBinaryExpr::~OtherBinaryExpr(){
delete left;
delete right;
}void OtherBinaryExpr::dump(int depth) {
  printf("%sOtherBinaryExpr\n", shift(depth-1));
if (left) {printf("%sleft\n", shift(depth));
 left->dump(depth+2);
}

if (op) printf("%sop = %d [%c]\n", shift(depth), op, op);

if (right) {printf("%sright\n", shift(depth));
 right->dump(depth+2);
}

}
BinaryExpr::~BinaryExpr(){
delete left;
delete right;
}void BinaryExpr::dump(int depth) {
  printf("%sBinaryExpr\n", shift(depth-1));
if (left) {printf("%sleft\n", shift(depth));
 left->dump(depth+2);
}

if (op) printf("%sop = %d [%c]\n", shift(depth), op, op);

if (right) {printf("%sright\n", shift(depth));
 right->dump(depth+2);
}

}
ConsList::~ConsList(){
for (int i=0; i<elems_count; i++)
  delete elems[i];
  delete[] elems;

}void ConsList::dump(int depth) {
  printf("%sConsList\n", shift(depth-1));
if (elems) for (int i=0; i<elems_count; i++) {
  printf("%selems[%d]\n", shift(depth), i);
  elems[i]->dump(depth+2);
}

}
CallExpr::~CallExpr(){
for (int i=0; i<params_count; i++)
  delete params[i];
  delete[] params;

delete left;
}void CallExpr::dump(int depth) {
  printf("%sCallExpr\n", shift(depth-1));
if (left) {printf("%sleft\n", shift(depth));
 left->dump(depth+2);
}

if (params) for (int i=0; i<params_count; i++) {
  printf("%sparams[%d]\n", shift(depth), i);
  params[i]->dump(depth+2);
}

}
QualifyExpr::~QualifyExpr(){
delete left;
delete ident;
}void QualifyExpr::dump(int depth) {
  printf("%sQualifyExpr\n", shift(depth-1));
if (left) {printf("%sleft\n", shift(depth));
 left->dump(depth+2);
}

if (ident) {printf("%sident\n", shift(depth));
 ident->dump(depth+2);
}

}
MethodCallExpr::~MethodCallExpr(){
for (int i=0; i<params_count; i++)
  delete params[i];
  delete[] params;

delete left;
delete ident;
}void MethodCallExpr::dump(int depth) {
  printf("%sMethodCallExpr\n", shift(depth-1));
if (left) {printf("%sleft\n", shift(depth));
 left->dump(depth+2);
}

if (ident) {printf("%sident\n", shift(depth));
 ident->dump(depth+2);
}

if (params) for (int i=0; i<params_count; i++) {
  printf("%sparams[%d]\n", shift(depth), i);
  params[i]->dump(depth+2);
}

}
ScopeCallExpr::~ScopeCallExpr(){
for (int i=0; i<params_count; i++)
  delete params[i];
  delete[] params;

delete left;
delete ident;
}void ScopeCallExpr::dump(int depth) {
  printf("%sScopeCallExpr\n", shift(depth-1));
if (left) {printf("%sleft\n", shift(depth));
 left->dump(depth+2);
}

if (ident) {printf("%sident\n", shift(depth));
 ident->dump(depth+2);
}

if (params) for (int i=0; i<params_count; i++) {
  printf("%sparams[%d]\n", shift(depth), i);
  params[i]->dump(depth+2);
}

}
Identifier::~Identifier(){
}void Identifier::dump(int depth) {
  printf("%sIdentifier\n", shift(depth-1));
}
StringLiteral::~StringLiteral(){
}void StringLiteral::dump(int depth) {
  printf("%sStringLiteral\n", shift(depth-1));
}
IntegerLiteral::~IntegerLiteral(){
}void IntegerLiteral::dump(int depth) {
  printf("%sIntegerLiteral\n", shift(depth-1));
}
NullLiteral::~NullLiteral(){
}void NullLiteral::dump(int depth) {
  printf("%sNullLiteral\n", shift(depth-1));
}

